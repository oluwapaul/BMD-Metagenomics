{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #########################################\
##\
##   DESeq2\
##\
#########################################\
\
\
#Adapted from https://joey711.github.io/phyloseq-extensions/DESeq2.html\
\
############################\
#But we want to know if the unannotated genes are going to skew the analysis, so we first create the unannotated category add it to the data set from the beginning. This will need to be added to the beginning of script for Fig1\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 #Add this to the right sections in Fig1 script\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
TIGR00000 <- data.frame('TIGR00000', '00', 'unannotated', 'unannotated', 'unannotated', 'TIGR00000', 'unannotated', "00")\
names(TIGR00000) <- c("TIGRFAM", "link", "mainrole", "subrole", "Name", "Function", "Isology_Type", "EC_Number")\
\
#Adding the unannotated to the taxonomy\
taxonomy2 <- rbind(taxonomy, TIGR00000)\
\
#To create unannotated \
sample_reads2_meta2$gene_00000 <- sample_reads2_meta2$Total_seqs - sample_reads2_meta2$TIGRtotals\
\
##############################\
\
\
#To use DESeq, we need no zeros in our OTU table. So we will edit the table by adding 1\
\
#rpm_final <- read.delim("output/20210514/TIGRfam/rpkm_count_table.txt", \
#                        sep = "\\t",\
#                        nrows = 10)\
#Now make the phyloseq object:\
\
#OTU.physeq2 = otu_table(as.matrix(rpm_test), taxa_are_rows=FALSE)\
#For other analysis of functional categories\
OTU.physeq = otu_table(as.matrix(rpm_final), taxa_are_rows=FALSE)\
\
tax.physeq = tax_table(as.matrix(tax.clean))\
meta.physeq = sample_data(meta)\
\
#We then merge these into an object of class phyloseq.\
#For other analysis of functional categories\
physeq_deseq = phyloseq(OTU.physeq, tax.physeq, meta.physeq)\
\
#Now make the phyloseq object:\
OTU.physeq = otu_table(as.matrix(rpm_deseq), taxa_are_rows=FALSE)\
tax.physeq = tax_table(as.matrix(tax.clean))\
meta.physeq = sample_data(meta)\
\
#We then merge these into an object of class phyloseq.\
physeq_deseq = phyloseq(OTU.physeq, tax.physeq, meta.physeq)\
\
my_day <- "d7"\
physeq_deseq_d7 <- prune_samples(c(rep(TRUE, 29), rep(FALSE, 62)), physeq_deseq) \
my_day <- "d35"\
physeq_deseq_d35 <- prune_samples(c(rep(FALSE, 29), rep(TRUE, 30), rep(FALSE, 32)), physeq_deseq) \
my_day <- "d78"\
physeq_deseq_d78 <- prune_samples(c(rep(FALSE, 29), rep(FALSE, 30), rep(TRUE, 32)), physeq_deseq) \
\
##############################################\
##THE FOLLOWING IS A MANUAL LOOP\
##############################################\
\
#The following two lines actually do all the complicated DESeq2 work. The function phyloseq_to_deseq2 converts your phyloseq-format microbiome data into a DESeqDataSet with dispersions estimated, using the experimental design formula, also shown (the ~body.site term). The DESeq function does the rest of the testing, in this case with default testing framework, but you can actually use alternatives.\
my_day <- "d7"\
diagdds = phyloseq_to_deseq2(physeq_deseq_d7, ~ antibiotic)\
#my_day <- "d35"\
#diagdds = phyloseq_to_deseq2(physeq_deseq_d35, ~ antibiotic)\
#my_day <- "d78"\
#diagdds = phyloseq_to_deseq2(physeq_deseq_d78, ~ antibiotic)\
\
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")\
#the test type of "Wald" tests for significance of coefficients in a Negative Binomial GLM. This is generally a pretty good assumption for sequencing experiments. This was designed with RNA-seq in mind, but also pretty good for 16S sequencing.\
\
\
###Investigate test results table\
\
#The following results function call creates a table of the results of the tests. Very fast. The hard work was already stored with the rest of the DESeq2-related data in our latest version of the diagdds object (see above). I then order by the adjusted p-value, removing the entries with an NA value. The rest of this example is just formatting the results table with taxonomic information for nice(ish) display in the HTML output.\
\
#Contrast: this argument specifies what comparison to extract from the object to build a results table. There are exactly three elements:\
\
#  1. the name of a factor in the design formula, \
#  2. the name of the numerator level for the fold change, and \
#  3. the name of the denominator level for the fold change (simplest case)\
\
############################################\
##A second manual loop within the main loop\
############################################\
alpha = 0.05\
my_contrast = c("antibiotic",  "Subtherapeutic", "Control")\
#my_contrast = c("antibiotic", "Therapeutic", "Control")\
#my_contrast = c("antibiotic", "Therapeutic", "Subtherapeutic")\
res = results(diagdds, contrast = my_contrast, pAdjustMethod = "bonferroni", cooksCutoff = FALSE)\
\
##Get summary of all results:\
\
overall_res <- res[which(res$padj < 2), ] ##Everything is less than 2 :)\
overall_res = cbind(as(overall_res, "data.frame"), as(tax_table(physeq_deseq)[rownames(overall_res), ], "matrix"))\
overall_res = as(overall_res, "data.frame")\
overall_res$direction <- ifelse(overall_res$log2FoldChange > 0, "Increased", "Decreased")\
overall_res$significant <- ifelse(overall_res$padj < alpha, "Sig", "NS")\
overall_res$sig_direction <-  paste(overall_res$significant, overall_res$direction)\
overall_res$sig_direction <- factor(overall_res$sig_direction)\
write.table(overall_res,paste0("output/all-results-DESeq2-", my_day, "_", my_contrast[2], "-", my_contrast[3], ".tsv"), sep="\\t", row.names = TRUE) \
\
ggplot(overall_res, aes(y=mainrole)) +\
  geom_bar(aes(fill = sig_direction), position = "dodge") +\
  scale_fill_manual("legend", values = my_colors) +\
  xlab(paste0("Count (", my_contrast[2], " compared to ", my_contrast[3], ")")) +\
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +\
  guides(fill = guide_legend(reverse=TRUE)) \
ggsave(paste0("output/DESeqCounts", my_day, "_", my_contrast[2], "-", my_contrast[3], ".png"), height \
       = 6, width = 7) \
\
ggplot(overall_res, aes(y=mainrole)) +\
  geom_bar(aes(fill = sig_direction), position = "dodge") +\
  scale_fill_manual("legend", values = my_colors) +\
  xlab(paste0("Count (", my_contrast[2], " compared to ", my_contrast[3], ")")) +\
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +\
  guides(fill = guide_legend(reverse=TRUE)) +\
  scale_x_log10()\
ggsave(paste0("output/DESeqCounts", my_day, "_", my_contrast[2], "-", my_contrast[3], "_logscale.png"), height = 6, width = 7) \
\
 ##Summarize FC of significant differences\
sigtab = res[which(res$padj < alpha), ]\
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq_deseq)[rownames(sigtab), ], "matrix"))\
sigtab = as(sigtab, "data.frame")\
write.table(sigtab,paste0("output/significant-results-DESeq2-", my_day, "_", my_contrast[2], "-", my_contrast[3], ".tsv"), sep="\\t", row.names = TRUE) \
\
\
\
#Let's look at the OTUs that were significantly different between the two treatment groups. The following makes a nice ggplot2 summary of the results.\
\
\
theme_set(theme_bw())\
scale_fill_discrete <- function(palname = "Set1", ...) \{\
  scale_fill_brewer(palette = palname, ...)\
\}\
\
\
# Order subrole in same order as mainrole\
sigtab$subrole <- factor(sigtab$subrole, levels = unique(sigtab[order(sigtab$mainrole), "subrole"]))\
\
\
DESeq_fig <- ggplot(sigtab, aes(x = fct_rev(subrole), y = log2FoldChange, color=mainrole)) + \
  geom_jitter(size=.1) + \
  ylab(paste0("log2FoldChange", "\\n","(", my_day, my_contrast[2], "/", my_day, my_contrast[3], ")" )) +\
  coord_flip() +\
  scale_color_manual(values = my_colors[c(1:10,12:18,29,30)]) + #d7 C-S\
\
  guides(colour = guide_legend(override.aes = list(size=5)))\
ggsave(paste0("output/DESeq2", my_day, "_", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 12, width = 12) #D78 C-S\
\
sigtab_pos <- subset(sigtab, log2FoldChange>0)\
sigtab_pos$subrole <- factor(sigtab_pos$subrole, levels = unique(sigtab[order(sigtab$mainrole), "subrole"]))\
\
sigtab_neg <- subset(sigtab, log2FoldChange<0)\
sigtab_neg$subrole <- factor(sigtab_neg$subrole, levels = unique(sigtab[order(sigtab$mainrole), "subrole"]))\
\
DESeq_fig2 <- ggplot(sigtab, aes(x = fct_rev(subrole), y = log2FoldChange, color=mainrole)) + \
  geom_boxplot(data = sigtab_pos) +\
  geom_boxplot(data = sigtab_neg) +\
  ylab(paste0("log2FoldChange", "\\n","(", my_day, my_contrast[2], "/", my_day, my_contrast[3], ")" )) +\
  coord_flip() +\
  scale_color_manual(values = my_colors[c(1:10,12:18,29,30)]) + #d7 C-S\
  guides(colour = guide_legend(override.aes = list(size=5)))\
ggsave(paste0("output/20210514/TIGRfam/DESeq2", my_day, "_", my_contrast[2], "-", my_contrast[3], "_boxplot.png"), DESeq_fig2, height = 12, width = 12) #D78 C-S\
\
\
\
######################################################################################\
##Figuring out how to group at higher levels\
\
length(taxonomy$TIGRFAM)\
length(unique(taxonomy$TIGRFAM))\
length(unique(taxonomy$Name))\
length(unique(taxonomy$Function))\
length(unique(taxonomy$subrole))\
length(unique(taxonomy$mainrole))\
length(unique(taxonomy$Isology_Type))\
\
head(unique(taxonomy$Function))\
##So it seems like I could group at the "Function", "subrole", and "mainrole" levels\
\
##test dataset\
\
#OTU.physeq_small = otu_table(as.matrix(rpm_deseq[,1:1000]), taxa_are_rows=FALSE)\
\
##We then merge these into an object of class phyloseq\
#physeq_deseq_small = phyloseq(OTU.physeq_small, tax.physeq, meta.physeq)\
\
#OTU.physeq = otu_table(as.matrix(rpm_deseq), taxa_are_rows=FALSE)\
#tax.physeq = tax_table(as.matrix(tax.clean))\
#meta.physeq = sample_data(meta)\
\
#We then merge these into an object of class phyloseq.\
#With unannotated\
physeq_deseq2 = phyloseq(OTU.physeq2, tax.physeq2, meta.physeq)\
\
ml <- "Function"\
#ml <- "subrole"\
#ml <- "mainrole"\
\
#taxa.summary <- physeq_deseq %>%\
#  tax_glom(taxrank = ml[1], NArm = FALSE) %>%   # agglomerate at `ml' level\
#  psmelt()  %>%                               # Melt to long format\
#  group_by(Sample, get(ml)) %>%\
#  summarise(Abundance.sum=sum(Abundance)) \
#taxa.summary <- as.data.frame(taxa.summary)\
#colnames(taxa.summary)[2] <- ml\
#glom_rpm <- dcast(taxa.summary, Sample ~ get(ml))\
#str(glom_rpm)\
#row.names(glom_rpm) <- glom_rpm$Sample\
#glom_rpm <- glom_rpm[,-1]\
#########################################\
##\
##   DESeq2\
##\
#########################################\
\
##----------------------------------\
#Make the phyloseq object:\
\
OTU.physeq.glom = otu_table(as.matrix(glom_rpm), taxa_are_rows=FALSE)\
#tax.physeq = tax_table(as.matrix(tax.clean))\
#meta.physeq = sample_data(meta)\
\
\
#We then merge these into an object of class phyloseq.\
\
\
physeq_deseq = phyloseq(OTU.physeq.glom, meta.physeq)\
#physeq_deseq = phyloseq(OTU.physeq, meta.physeq)\
\
#my_day <- "d7"\
#physeq_deseq_d7 <- prune_samples(c(rep(TRUE, 29), rep(FALSE, 62)), physeq_deseq) \
#my_day <- "d35"\
#physeq_deseq_d35 <- prune_samples(c(rep(FALSE, 29), rep(TRUE, 30), rep(FALSE, 32)), physeq_deseq) \
my_day <- "d78"\
physeq_deseq_d78 <- prune_samples(c(rep(FALSE, 29), rep(FALSE, 30), rep(TRUE, 32)), physeq_deseq) \
\
##############################################\
##THE FOLLOWING IS A MANUAL LOOP\
##############################################\
\
#The following two lines actually do all the complicated DESeq2 work. The function phyloseq_to_deseq2 converts your phyloseq-format microbiome data into a DESeqDataSet with dispersions estimated, using the experimental design formula, also shown (the ~body.site term). The DESeq function does the rest of the testing, in this case with default testing framework, but you can actually use alternatives.\
#my_day <- "d7"\
#diagdds = phyloseq_to_deseq2(physeq_deseq_d7, ~ antibiotic)\
#my_day <- "d35"\
#diagdds = phyloseq_to_deseq2(physeq_deseq_d35, ~ antibiotic)\
my_day <- "d78"\
diagdds = phyloseq_to_deseq2(physeq_deseq_d78, ~ antibiotic)\
\
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")\
#the test type of "Wald" tests for significance of coefficients in a Negative Binomial GLM. This is generally a pretty good assumption for sequencing experiments. This was designed with RNA-seq in mind, but also pretty good for 16S sequencing.\
\
\
###Investigate test results table\
\
#The following results function call creates a table of the results of the tests. Very fast. The hard work was already stored with the rest of the DESeq2-related data in our latest version of the diagdds object (see above). I then order by the adjusted p-value, removing the entries with an NA value. The rest of this example is just formatting the results table with taxonomic information for nice(ish) display in the HTML output.\
\
#Contrast: this argument specifies what comparison to extract from the object to build a results table. There are exactly three elements:\
\
#  1. the name of a factor in the design formula, \
#  2. the name of the numerator level for the fold change, and \
#  3. the name of the denominator level for the fold change (simplest case)\
\
############################################\
##A second manual loop within the main loop\
############################################\
alpha = 0.05\
#my_contrast = c("antibiotic",  "Subtherapeutic", "Control")\
#my_contrast = c("antibiotic", "Therapeutic", "Control")\
my_contrast = c("antibiotic", "Therapeutic", "Subtherapeutic")\
BiocManager::valid()\
sessionInfo()\
res = results(diagdds, contrast = my_contrast, pAdjustMethod = "BH", cooksCutoff = FALSE)\
\
##Get summary of all results:\
\
overall_res <- res[which(res$padj < 2), ] ##Everything is less than 2 :)\
overall_res = as(overall_res, "data.frame")\
overall_res = merge(taxonomy[,-1:-2], overall_res, by.x = ml, by.y = 0)\
overall_res$direction <- ifelse(overall_res$log2FoldChange > 0, "Increased", "Decreased")\
overall_res$significant <- ifelse(overall_res$padj < alpha, "padj < 0.05", "padj > 0.05")\
overall_res$FC <- ifelse(abs(overall_res$log2FoldChange) > 1, "sig", "NS")\
overall_res$filter <- ifelse(overall_res$FC == "sig" & overall_res$significant == "padj < 0.05", "sig", "NS")\
overall_res$sig_direction <-  paste(overall_res$filter, overall_res$direction)\
overall_res$sig_direction <- factor(overall_res$sig_direction)\
write.table(overall_res,paste0("output/DESeq/all-results-DESeq2-", my_day, "_", my_contrast[2], "-", my_contrast[3], ".tsv"), sep="\\t", row.names = TRUE) \
\
ggplot(overall_res, aes(y=mainrole)) +\
  geom_bar(aes(fill = sig_direction), position = "dodge") +\
  scale_fill_manual("legend", values = my_colors) +\
  xlab(paste0("Count (", my_contrast[2], " compared to ", my_contrast[3], ")")) +\
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +\
  guides(fill = guide_legend(reverse=TRUE)) \
ggsave(paste0("output/DESeq/DESeqCounts", my_day, "_", my_contrast[2], "-", my_contrast[3], ".png"), height \
       = 6, width = 7) \
\
ggplot(overall_res, aes(y=mainrole)) +\
  geom_bar(aes(fill = sig_direction), position = "dodge") +\
  scale_fill_manual("legend", values = my_colors) +\
  xlab(paste0("Count (", my_contrast[2], " compared to ", my_contrast[3], ")")) +\
  theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5)) +\
  guides(fill = guide_legend(reverse=TRUE)) +\
  scale_x_log10()\
ggsave(paste0("output/DESeq/DESeqCounts", my_day, "_", my_contrast[2], "-", my_contrast[3], "_logscale.png"), height = 6, width = 7) \
\
##Summarize FC of significant differences\
sigtab = res[which(res$padj < alpha), ]\
sigtab = as(sigtab, "data.frame")\
sigtab = merge(taxonomy[,-1:-2], sigtab, by.x = ml, by.y = 0)\
write.table(sigtab,paste0("output/DESeq/significant-results-DESeq2-", my_day, "_", my_contrast[2], "-", my_contrast[3], ".tsv"), sep="\\t", row.names = TRUE) \
\
\
\
#Let's look at the OTUs that were significantly different between the two treatment groups. The following makes a nice ggplot2 summary of the results.\
\
\
theme_set(theme_bw())\
scale_fill_discrete <- function(palname = "Set1", ...) \{\
  scale_fill_brewer(palette = palname, ...)\
\}\
\
\
# Order subrole in same order as mainrole\
sigtab$subrole <- factor(sigtab$subrole, levels = unique(sigtab[order(sigtab$mainrole), "subrole"]))\
\
DESeq_fig <- ggplot(sigtab, aes(x = fct_rev(subrole), y = log2FoldChange, color=mainrole)) + \
  geom_jitter(size=1) + \
  ylab(paste0("log2FoldChange", "\\n","(", my_day, my_contrast[2], "/", my_day, my_contrast[3], ")" )) +\
  coord_flip() +\
  scale_color_manual(values = my_colors[c(1:10,12:18,29,30:31)]) + #d7 C-S\
  \
  guides(colour = guide_legend(override.aes = list(size=5)))\
ggsave(paste0("output/DESeq/DESeq2", my_day, "_", my_contrast[2], "-", my_contrast[3], ".png"), DESeq_fig, height = 12, width = 12) #D78 C-S\
\
\
\
#######################################################################################\
rpm_meta <- merge(rpm_final, meta, by.x = 0, by.y = 0)\
str(rpkm_meta[1:10,9998:10008])\
\
ggplot(rpkm_meta, aes(antibiotic, gene_102141)) +\
  geom_jitter() +\
  geom_boxplot(aes(color=antibiotic), alpha = 0.01) +\
  facet_grid(.~day) +\
#  scale_y_log10() +\
  theme(axis.text.x=element_text(angle=270, hjust=0, vjust=0.5))\
ggsave(paste("output/20210514/TIGRfam/gene_102141", my_day, "_", my_contrast[2], "-", my_contrast[3], ".png"), height = 4, width = 6)\
\
\
}